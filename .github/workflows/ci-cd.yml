# ## Uncomment the following for CI/CD

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - 'README.md'
#       - '*.md'
#       - 'docs/**'

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   integration:
#     name: Continuous Integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 pytest
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#       - name: Lint with flake8
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           # exit-zero treats all errors as warnings
#           flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

#       - name: Test with pytest
#         run: |
#           echo "Running unit tests"
#           # Add actual tests when available
#           # pytest

#   build-and-push-ecr-image:
#     name: Continuous Delivery
#     needs: integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install Utilities
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y jq unzip

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Build a docker container and push it to ECR
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#           echo "Pushing image to ECR..."
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#           echo "::set-output name=image-latest::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

#   deploy-to-ec2:
#     name: Continuous Deployment
#     needs: build-and-push-ecr-image
#     runs-on: self-hosted
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Pull latest images
#         run: |
#           docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

#       - name: Stop and remove container if running
#         run: |
#           docker ps -q --filter "name=people_tracking" | grep -q . && docker stop people_tracking && docker rm -fv people_tracking || echo "No container running"

#       - name: Run Docker Image to serve users
#         run: |
#           docker run -d -p 8501:8501 --name people_tracking --restart unless-stopped \
#           -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
#           -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
#           -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
#           ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

#       - name: Clean previous images and containers
#         run: |
#           docker system prune -af --volumes
          
#       - name: Health check
#         run: |
#           sleep 10
#           curl -s --retry 10 --retry-connrefused http://localhost:8501/ > /dev/null
#           if [ $? -eq 0 ]; then
#             echo "Application is running successfully!"
#           else
#             echo "Application health check failed!"
#             exit 1
#           fi